################################################################################
#
# RevBayes Example: Bayesian inference of phylogeny using a general time reversible model
#                   with gamma distributed rate variation among sites. We use
#                   a constant-rate birth-death process as the prior distribution
#                   on trees. All branches are assumed to share a global clock.
#                   We estimate divergence times by using a several informative 
#                   node calibrations and a log-uniform prior on the clock.
# 
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

data <- readDiscreteCharacterData("data/primates_cytb.nex")

# Get some useful variables from the data. We need these later on.
n_species <- data.ntaxa()
taxa <- data.taxa()

# vector to add MCMC moves
moves = VectorMoves()
monitors = VectorMonitors()



######################
# Substitution Model #
######################

#### specify the GTR+G substitution model applied uniformly to all sites ###
er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)
moves.append( mvSimplexElementScale(er,weight=3) )


pi_prior <- v(1,1,1,1) 
pi ~ dnDirichlet(pi_prior)
moves.append( mvSimplexElementScale(pi,weight=2) )


#### create a deterministic variable for the rate matrix ####
Q := fnGTR(er,pi) 


#############################
# Among Site Rate Variation #
#############################

alpha_prior_mean <- ln(2.0)
alpha_prior_sd <- 0.587405
alpha ~ dnLognormal( alpha_prior_mean, alpha_prior_sd )
gamma_rates := fnDiscretizeGamma( alpha, alpha, 4, false )

# add moves for the stationary frequencies, exchangeability rates and the shape parameter
moves.append( mvScale(alpha,weight=2) )




##############
# Tree model #
##############

### the birth rate is a stochastic random variable drawn from a lognormal prior
### MCMC samples this variable using a scale proposal
diversification_mean <- ln( ln(n_species/2.0) / 90 )
diversification_sd <- 0.587405*2
diversification ~ dnLognormal(mean=diversification_mean,sd=diversification_sd) 
moves.append( mvScale(diversification,lambda=1.0,tune=true,weight=3.0) )

turnover_mean <- ln( ln(n_species/2.0) / 90 )
turnover_sd <- 0.587405*2
turnover ~ dnLognormal(mean=turnover_mean,sd=turnover_sd) 
moves.append( mvScale(turnover,lambda=1.0,tune=true,weight=3.0) )

### Transform the parameters
birth_rate := diversification + turnover
death_rate := turnover

### rho is the probability of sampling species at the present
### fix this to 367/450, since there are ~450 described species of primates
### and we have sampled 367
rho <- n_species/450

### the BDP is conditioned on the root time
### here we use an informative prior on the root age
### this prior is a normal distribution with mean 90 and standard deviation of 6
root_time ~ dnNormal(mean=90.0,sd=6.0,min=0.0,max=5000.0)
moves.append( mvScale(root_time, weight=2.0) )

### the time tree is a stochastic node modeled by the constant rate birth-death process (dnBDP)
psi ~ dnBDP(lambda=birth_rate, mu=death_rate, rho=rho, rootAge=root_time, samplingStrategy="uniform", condition="survival", taxa=taxa)


### add some moves that change the tree
moves.append( mvNarrow(psi, weight=5.0) )
moves.append( mvNNI(psi, weight=1.0) )
moves.append( mvFNPR(psi, weight=3.0) )
moves.append( mvGPR(psi, weight=1.0) )
moves.append( mvSubtreeScale(psi, weight=3.0) )
moves.append( mvNodeTimeSlideUniform(psi, weight=15.0) )


### now we additionally add a deterministic variable for the age of
### catarrhini
clade_catarrhini = clade("Pan_paniscus", "Macaca_mulatta")
age_catarrhini := tmrca(psi, clade_catarrhini)
obs_age_catarrhini ~ dnNormal(age_catarrhini,6)
obs_age_catarrhini.clamp(29)

### platyrrhini
clade_platyrrhini = clade("Alouatta_palliata", "Callicebus_donacophilus")
age_platyrrhini := tmrca(psi, clade_platyrrhini)
obs_age_platyrrhini ~ dnNormal(age_platyrrhini,3)
obs_age_platyrrhini.clamp(23.5)

### simiiformes
clade_simiiformes = clade("Cebus_albifrons", "Macaca_mulatta")
age_simiiformes := tmrca(psi, clade_simiiformes)
obs_age_simiiformes ~ dnNormal(age_simiiformes,4.5)
obs_age_simiiformes.clamp(43)

### lorisiformes
clade_lorisiformes = clade("Loris_tardigradus", "Galago_senegalensis")
age_lorisiformes := tmrca(psi, clade_lorisiformes)
obs_age_lorisiformes ~ dnNormal(age_lorisiformes,3)
obs_age_lorisiformes.clamp(40)



###################
# PhyloCTMC Model #
###################

logClockRate ~ dnUniform(-6,1)
clockRate := 10^logClockRate

moves.append( mvSlide(logClockRate) )

# the sequence evolution model
seq ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=clockRate, siteRates=gamma_rates, type="DNA")

# attach the data
seq.clamp(data)




#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(Q)






monitors.append( mnModel(filename="output/primates_cytb_node_calibration.log",printgen=10, separator = TAB) )
monitors.append( mnFile(filename="output/primates_cytb_node_calibration.trees",printgen=10, separator = TAB, psi) )
monitors.append( mnScreen(printgen=1000, clockRate, root_time, age_simiiformes) )

mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=10000,tuningInterval=250)
mymcmc.run(generations=30000)


# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace = readTreeTrace("output/primates_cytb_node_calibration.trees", treetype="clock")

map_tree = mapTree(treetrace,"output/primates_cytb_node_calibration.tree")

# you may want to quit RevBayes now
q()

