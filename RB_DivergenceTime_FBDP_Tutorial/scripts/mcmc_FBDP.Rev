################################################################################
#
# RevBayes Example: Bayesian inference of divergence times under 
#                   the fossilized birth-death process using molecular and
#                   fossil dates are the mean ages reported from PaleoDB.
#
#
# authors: Sebastian Hoehna
#
################################################################################


taxa <- readTaxonData("data/taxa_data.tsv", delimiter=TAB)
D_mol <- readDiscreteCharacterData("data/primates_cytb_with_fossils.nex")


moves = VectorMoves()
monitors = VectorMonitors()


##############
# Tree model #
##############

# Specify a prior on the diversification and turnover rate
diversification ~ dnUniform(0,10)
turnover ~ dnUniform(0,10)

# now transform the diversification and turnover rates into speciation and extinction rates
speciation := diversification + turnover
extinction := turnover

### process time ###
## Uniform prior on process time
root_time ~ dnUnif(62, 500.0) # oldest fossil is 61 Ma

## The sampling-through-time parameter 
fossil_rate ~ dnUniform(0,10)

## The probability of sampling at the present (rho)
sampling_prob <- 23 / 450 # 23 out of the ~ 450 extant primate species

## the Birth-death distribution ##
tree_prior = dnFBDP(rootAge=root_time, lambda=speciation, mu=extinction, psi=fossil_rate, rho=sampling_prob, condition="survival", taxa=taxa)

clade_platyrrhini   = clade("Alouatta_palliata", "Aotus_trivirgatus", "Callicebus_donacophilus", "Cebus_albifrons", "Saimiri_sciureus")
clade_catarrhini    = clade("Chlorocebus_aethiops", "Colobus_guereza", "Hylobates_lar", "Macaca_mulatta", "Pan_paniscus")
clade_lemuriformes  = clade("Cheirogaleus_major", "Lemur_catta", "Lepilemur_hubbardorum", "Microcebus_murinus", "Propithecus_coquereli", "Varecia_variegata_variegata") 
clade_lorisiformes  = clade("Galago_senegalensis", "Loris_tardigradus", "Nycticebus_coucang", "Otolemur_crassicaudatus", "Perodicticus_potto")


clade_catarrhini_fossils = clade("Aegyptopithecus", "Catopithecus", "Moeripithecus", "Oligopithecus", "Propliopithecus", clade_catarrhini)
clade_lorisiformes_fossils = clade("Komba", "Nycticeboides", clade_lorisiformes)
clade_lemuriformes_fossils = clade("Anchomomys", clade_lemuriformes)
clade_platyrrhini_fossils = clade( "Branisella", clade_platyrrhini)

clade_constraints = [ clade_catarrhini_fossils, clade_lorisiformes_fossils, clade_lemuriformes_fossils, clade_platyrrhini_fossils ]


psi ~ dnConstrainedTopology(tree_prior, clade_constraints)

#psi_extant := fnExtantTree( psi )

# create some moves that change the stochastic variables
# all moves are sliding proposals but you could use scaling proposals for the rates too
moves.append( mvSlide(diversification,delta=1,tune=true,weight=1) )
moves.append( mvSlide(turnover,delta=1,tune=true,weight=1) )
moves.append( mvSlide(fossil_rate,delta=1,tune=true,weight=1) )
moves.append( mvSlide(root_time,delta=1,tune=true,weight=1) )

moves.append( mvNarrow(psi, weight=5.0) )
moves.append( mvNNI(psi, weight=1.0) )
moves.append( mvFNPR(psi, weight=3.0) )
moves.append( mvSubtreeScale(psi, weight=3.0) )
moves.append( mvNodeTimeSlideUniform(psi, weight=15.0) )

#moves.append( mvCollapseExpandFossilBranch(psi,process_time,weight=10.0) )


################################
# Molecular Substitution Model #
################################

# substitution model priors
bf <- v(1,1,1,1)
e <- v(1,1,1,1,1,1)
pi ~ dnDirichlet(bf)
er ~ dnDirichlet(e)

# moves on the substitution process parameters
# first some moves only changing one value of the simplex
moves.append( mvSimplexElementScale(pi, alpha=10.0, tune=true, weight=2.0) )
moves.append( mvSimplexElementScale(er, alpha=10.0, tune=true, weight=3.0) )

# the rate matrix
Q_mol := fnGTR(er,pi)



#############################
# Among Site Rate Variation #
#############################

alpha_prior_mean <- ln(2.0)
alpha_prior_sd <- 0.587405
alpha ~ dnLognormal( alpha_prior_mean, alpha_prior_sd )
gamma_rates := fnDiscretizeGamma( alpha, alpha, 4, false )

# add moves for the stationary frequencies, exchangeability rates and the shape parameter
moves.append( mvScale(alpha,weight=2) )



#############################
# Strict global clock model #
#############################

log_mol_clock_rate ~ dnUniform(-8,2)
mol_clock_rate := 10^log_mol_clock_rate

moves.append( mvSlide(log_mol_clock_rate, weight=1.0) )




###################
# PhyloCTMC Model #
###################

seq_mol ~ dnPhyloCTMC(tree=psi, Q=Q_mol, branchRates=mol_clock_rate, siteRates=gamma_rates, type="DNA")

# attach the data
seq_mol.clamp(D_mol)





mymodel = model(bf)


monitors.append( mnModel(filename="output/FBDP.log",printgen=10, separator = TAB) )
#monitors.append( mnFile(filename="output/FBDP.trees",printgen=10, separator = TAB, psi_extant) )
monitors.append( mnScreen(printgen=100, mol_clock_rate, root_time) )

 
mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=5000,200)
mymcmc.run(generations=25000)




# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
#treetrace = readTreeTrace("output/FBDP.trees", treetype="clock")
# and get the summary of the tree trace
#treetrace.summarize()

#msacc_tree = mccTree(treetrace,"output/FBDP.tree")

# you may want to quit RevBayes now
q()

