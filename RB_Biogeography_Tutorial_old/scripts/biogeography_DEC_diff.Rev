
fp = "./"
data_fn = fp + "data/primates_bg_n3.tsv" 
tree_fn = fp + "data/primates.tree"
out_str = "bg_diff"

# helper variables
moves = VectorMoves() # vector to add MCMC moves
monitors = VectorMonitors() # vector to add monitors

# hard coded for now
n_areas = 3
n_areas_tmp = n_areas
n_states = floor(2^n_areas_tmp)

# read data as natural numbers
data = readCharacterDataDelimited(file=data_fn, type="Bitset")

#names = d.names()
psi <- readTrees(tree_fn)[1]

# clock
clock_bg ~ dnExp(10)
mv[mvi++] = mvScale(clock_bg, weight=5)

# presence-absence to state conversion
# 1  000
# 2  100
# 3  010
# 4  110
# 5  001
# 6  101
# 7  011
# 8  111

# per-area extinction rates
# ... for area i
for (i in 1:3) {
    e[i] ~ dnExp(10.)
    mv[mvi++] = mvScale(e[i], weight=2)
}

# between-area dispersal rates
for (i in 1:3) { 							# ... from area i
    for (j in 1:3) {    					# ... to area j 
    	d[i][j] <- 0.
        if (i != j) {       				# ... ignoring self-dispersal events
            d[i][j] ~ dnExp(10.)
            mv[mvi++] = mvScale(d[i][j], weight=2)
        }
    }
}

# initalize rates to 0.
for (i in 1:8) {
    for (j in 1:8) {
        r[i][j] <- 0.
    }
}

# Assign local extinction (extirpation) rates to `r`.
r[2][1] := e[1]               # 100 -> 000 : Extirpate in area 1
r[3][1] := e[2]               # 010 -> 000 : Extirpate in area 2
r[4][2] := e[2]               # 011 -> 001 : Extirpate in area 2
r[4][3] := e[3]               # 011 -> 010 : Extirpate in area 3
r[5][1] := e[3]               # 001 -> 000 : Extirpate in area 3
r[6][2] := e[1]               # 101 -> 001 : Extirpate in area 1
r[6][5] := e[3]               # 101 -> 100 : Extirpate in area 3
r[7][3] := e[1]               # 110 -> 010 : Extirpate in area 1
r[7][5] := e[2]               # 110 -> 100 : Extirpate in area 2
r[8][4] := e[1]               # 111 -> 011 : Extirpate in area 1
r[8][6] := e[2]               # 111 -> 101 : Extirpate in area 2
r[8][7] := e[3]               # 111 -> 110 : Extirpate in area 3

# Assign dispersal rates to `r`.
r[2][4] := d[3][2]            # 001 -> 011 : Disperse from area 3 to 2
r[2][6] := d[3][1]            # 001 -> 101 : Disperse from area 3 to 1
r[3][4] := d[2][3]            # 010 -> 011 : Disperse from area 2 to 3
r[3][7] := d[2][1]            # 010 -> 110 : Disperse from area 2 to 1
r[5][6] := d[1][3]            # 100 -> 101 : Disperse from area 1 to 3
r[5][7] := d[1][2]            # 100 -> 110 : Disperse from area 1 to 2
r[4][8] := d[2][1] + d[3][1]  # 011 -> 111 : Disperse from area 2 to 1 and from 3 to 1
r[6][8] := d[1][2] + d[3][2]  # 101 -> 111 : Disperse from area 1 to 2 and from 3 to 2
r[7][8] := d[1][3] + d[2][3]  # 110 -> 111 : Disperse from area 1 to 3 and from 2 to 3
                        
# Show the contents of `r`.
# r

# Does this look as expected? What patterns do you see?
# What series of events might occur to get from state 100 to state 001?
# Come up with three examples.
# Given the rates, which scenario do you think is most likely?

# Convert the rates, `r`, from RealPos[][] into a Simplex (i.e. RealPos[]).
k <- 1
for (i in 1:8) {
    for (j in 1:8) {
        if (i != j) {
            er_nat[k] := r[i][j]
            k += 1
        }
    }
}

er := simplex(er_nat)
q := fnFreeK(er)

# create the cladogenesis transition probability matrix
widespread_sympatry_wt <- 1
subset_sympatry_wt     <- 1
allopatry_wt           <- 1
clado_prior            <- [ widespread_sympatry_wt, subset_sympatry_wt, allopatry_wt ]

# create prior on event types
clado_type             ~ dnDirichlet(clado_prior)
#mv[mvi++]              = mvSimplex(clado_type, alpha=50., numCats=3, offset=1.0)
mv[mvi++]               = mvSimplexElementScale(clado_type, weight=5)
#clado_type <- simplex( clado_prior )

# for easy monitoring
widespread_sympatry    := clado_type[1]
subset_sympatry        := clado_type[2]
allopatry              := clado_type[3]

clado_prob := fnCladoProbs(clado_type, n_areas, 2)

rf <- simplex( rep(1,8) )

# build ctmc
m ~ dnPhyloCTMCClado( tree=psi, Q=q, cladoProbs=clado_prob, rootFrequencies=rf, branchRates=clock_bg, nSites=1, type="NaturalNumbers" )
m.clamp(data)

# make model
mdl = model(m)
#str(m)

# monitors
mn[mni++] = mnScreen(printgen=1000, clock_bg, widespread_sympatry, subset_sympatry, allopatry)
mn[mni++] = mnFile(clock_bg, d[1][2], d[1][3], d[2][1], d[2][3], d[3][1], d[3][2], e[1], e[2], e[3], widespread_sympatry, subset_sympatry, allopatry, filename="./output/"+out_str+".params.txt")
mn[mni++] = mnJointConditionalAncestralState(tree=psi, ctmc=m, type="NaturalNumbers", printgen=10, withTips=true, withStartStates=true, filename="./output/"+out_str+".states.txt")

# mcmc
ch = mcmc(mv,mn,mdl)
ch.burnin(10000,200)
ch.run(30000)

# 
state_fn = fp + "output/"+out_str+".states.txt"
atlas_fn = fp + "data/earth3.still.atlas.txt"
phw_fn = fp + "output/"+out_str+".phw.txt"
convertToPhylowood(treefile=tree_fn, geofile=atlas_fn, statefile=state_fn, outfile=phw_fn, burnin=0., chartype="NaturalNumbers", bgtype="Range")


# you may want to quit RevBayes now
q()
