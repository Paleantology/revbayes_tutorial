#source("RevBayes_scripts/biogeography_DEC_epoch.Rev")

fp = "./"
data_fn = fp + "data/primates_bg_n3.tsv" 
tree_fn = fp + "data/primates.tree"
atlas_fn = fp + "data/earth3.drift.atlas.txt"
out_str = "bg_epoch"

# helper variables
moves = VectorMoves() # vector to add MCMC moves
monitors = VectorMonitors() # vector to add monitors

# hard coded for now
n_areas = 3
n_areas_tmp = n_areas
n_states = floor(2^n_areas_tmp)

# read data as natural numbers
data = readCharacterDataDelimited(file=data_fn, type="Bitset")

# read the tree
psi <- readTrees(tree_fn)[1]

# read the atlas
atlas <- readAtlas(atlas_fn)
atlas <- readAtlas( "data/earth3.drift.atlas.txt")
n_epochs = atlas.nEpochs()

# clock
clock_bg ~ dnExp(10)
mv[mvi++] = mvScale(clock_bg, weight=5)

# set up dispersal per epoch
d_prior <- atlas.getValues("dispersal")
for (t in 1:n_epochs) {
	for (i in 1:n_areas) {
		for (j in 1:n_areas) {
			if (i != j) {
				d_raw[t][i][j] ~ dnExp( 10. )
				mv[mvi++] = mvScale(d_raw[t][i][j], weight=2)
				d[t][i][j] := d_raw[t][i][j] * abs(d_prior[t][i][j])
			} else {
				d[t][i][j] <- abs(0.)
			}
		}
	}
}

# set up extinction per epoch
e_prior <- atlas.getValues("extinction")
for (t in 1:n_epochs) {
	for (i in 1:n_areas) {
		e_raw[t][i] ~ dnExp( 10. )
		mv[mvi++] = mvScale(e_raw[t][i], weight=2)
		e[t][i] := e_raw[t][i] * abs(d_prior[t][i][1])
	}
}

# set up the rate matrix per epoch
for (t in 1:n_epochs) {
	rates[t] ~ dnGamma(2,2)
	mv[mvi++] = mvScale(rates[t], weight=2)	
	q[t] := fnDECRateMatrix(d[t], e[t], rangeSize=simplex(1,1,0))
}

# make epoch rate generator over all epochs
times <- atlas.epochTimes()
q_epoch := fnEpoch( Q=q, times=times, rates=rates )

# create prior on event types
clado_type              ~ dnDirichlet([1,1,1])
mv[mvi++]               = mvSimplexElementScale(clado_type, weight=5)

# for easy monitoring
widespread_sympatry    := clado_type[1]
subset_sympatry        := clado_type[2]
allopatry              := clado_type[3]

# create the cladogenesis transition probability matrix
clado_prob := fnCladoProbs(clado_type, n_areas, 2)

# root frequencies
rf := fnDECRoot( rep(1,n_states), rangeSize=simplex(1,1,0) )

# build ctmc
m ~ dnPhyloCTMCClado( tree=psi, Q=q_epoch, rootFrequencies=rf, cladoProbs=clado_prob, branchRates=clock_bg, nSites=1, type="NaturalNumbers" )
m.clamp(data)

# make model
mdl = model(m)
#str(m)

# monitors
mn[mni++] = mnScreen(printgen=1000, clock_bg, rates, widespread_sympatry, subset_sympatry, allopatry)
mn[mni++] = mnFile(clock_bg, d[1][1], d[1][2], d[1][3], d[2][1], d[2][2], d[2][3], e[1], e[2], rates, widespread_sympatry, subset_sympatry, allopatry, filename="./output/"+out_str+".params.txt")
mn[mni++] = mnJointConditionalAncestralState(tree=psi, ctmc=m, type="NaturalNumbers", printgen=10, withTips=true, withStartStates=true, filename="./output/"+out_str+".states.txt")
mn[mni++] = mnJointConditionalAncestralState(tree=psi, ctmc=m, filename="./output/"+out_str+".states.txt", type="NaturalNumbers")

# mcmc
ch = mcmc(mv,mn,mdl)
#ch.burnin(10000,200)
ch.run(30000)

# 
state_fn = fp + "output/"+out_str+".states.txt"
phw_fn = fp + "output/"+out_str+".phw.txt"
convertToPhylowood(treefile=tree_fn, geofile=atlas_fn, statefile=state_fn, outfile=phw_fn, burnin=0., chartype="NaturalNumbers", bgtype="Range")


# you may want to quit RevBayes now
q()
