
fp = "./"
data_fn = fp + "data/primates_bg_n3.tsv" 
tree_fn = fp + "data/primates.tree"
out_str = "bg_joint"

# helper variables
moves = VectorMoves() # vector to add MCMC moves
monitors = VectorMonitors() # vector to add monitors

# hard coded for now
n_areas = 3
n_areas_tmp = n_areas
n_states = floor(2^n_areas_tmp)

# read biogeo data as natural numbers
data = readCharacterDataDelimited(file=data_fn, type="Bitset")

# read molecular data as DNA
seqData = readDiscreteCharacterData("data/primates_cytb.nex")

numTips = seqData.ntaxa()
taxa = seqData.taxa()
numNodes = numTips * 2 - 1

speciation ~ dnExponential(10.)
extinction ~ dnExponential(10.)

# rescaling mv on speciation and extinction rates
mv[mvi++] = mvScale(speciation, lambda=1, tune=true, weight=3.0)
mv[mvi++] = mvScale(extinction, lambda=1, tune=true, weight=3.0)

sampling_fraction <- 23. / 450 # 23 out of the ~ 450 primate species

psi ~ dnBDP(lambda=speciation, mu=extinction, rootAge=75, rho=sampling_fraction, taxa=taxa )

mv[mvi++] = mvSubtreeScale(psi, weight=5.0)
mv[mvi++] = mvNodeTimeSlideUniform(psi, weight=10.0)

mv[mvi++] = mvNNI(psi, weight=5.0)
mv[mvi++] = mvFNPR(psi, weight=5.0)

er_mol_prior <- v(1,1,1,1,1,1)
er_mol ~ dnDirichlet(er_mol_prior)
pi_mol_prior <- v(1,1,1,1)
pi_mol ~ dnDirichlet(pi_mol_prior)

mv[mvi++] = mvSimplexElementScale(er_mol, alpha=20., weight=15)
mv[mvi++] = mvSimplexElementScale(pi_mol, alpha=20., weight=5)

Q_mol := fnGTR(er_mol,pi_mol)

alpha_prior <- 0.05

alpha ~ dnExponential(alpha_prior)
gamma_rates := fnDiscretizeGamma( alpha, alpha, 4 )
mv[mvi++] = mvScale(alpha, tune=true, weight=2.0)

clock_mol ~ dnExponential(10.)
mv[mvi++] = mvScale(clock_mol, tune=true, weight=2.0)

seq ~ dnPhyloCTMC(tree=psi, Q=Q_mol, siteRates=gamma_rates, branchRates=clock_mol, type="DNA")
seq.clamp(seqData)

# per-area extinction rates
# ... for area i
for (i in 1:3) {
    e[i] ~ dnExp(10.)
    mv[mvi++] = mvScale(e[i], weight=2)
}

# between-area dispersal rates
for (i in 1:3) { 							# ... from area i
    for (j in 1:3) {    					# ... to area j 
    	d[i][j] <- 0.
        if (i != j) {       				# ... ignoring self-dispersal events
            d[i][j] ~ dnExp(10.)
            mv[mvi++] = mvScale(d[i][j], weight=2)
        }
    }
}

# DEC anagenic Q matrix
er_nat := fnDECRates(d, e)
er := simplex(er_nat)
q := fnFreeK(er)

# create the cladogenesis transition probability matrix
widespread_sympatry_wt <- 1
subset_sympatry_wt     <- 1
allopatry_wt           <- 1
clado_prior            <- [ widespread_sympatry_wt, subset_sympatry_wt, allopatry_wt ]

# create prior on event types
clado_type             ~ dnDirichlet(clado_prior)
mv[mvi++]               = mvSimplexElementScale(clado_type, alpha=0.1, tune=false, weight=5)

# for easy monitoring
widespread_sympatry    := clado_type[1]
subset_sympatry        := clado_type[2]
allopatry              := clado_type[3]
clado_prob := fnCladoProbs(clado_type, n_areas, 2)

# biogeographic clock
clock_scale_bg ~ dnGamma(2.0,2.0)
clock_bg := clock_mol * clock_scale_bg
mv[mvi++] = mvScale(clock_scale_bg, lambda=0.1, tune=true, weight=2)

rf <- simplex( rep(1,8) )

# build ctmc
m ~ dnPhyloCTMCClado( tree=psi, Q=q, cladoProbs=clado_prob, rootFrequencies=rf, branchRates=clock_bg, nSites=1, type="NaturalNumbers" )
m.clamp(data)

# make model
mdl = model(clock_mol)

# monitors
mn[mni++] = mnScreen(printgen=1000, clock_bg, clock_scale_bg, widespread_sympatry, subset_sympatry, allopatry, clock_mol)
mn[mni++] = mnFile(clock_bg, clock_scale_bg, d[1][2], d[1][3], d[2][1], d[2][3], d[3][1], d[3][2], e[1], e[2], e[3], widespread_sympatry, subset_sympatry, allopatry, er_mol, pi_mol, gamma_rates, filename="./output/"+out_str+".params.txt",printgen=10)
mn[mni++] = mnFile(psi, filename="./output/"+out_str+".tre",printgen=10)
mn[mni++] = mnJointConditionalAncestralState(tree=psi, ctmc=m, type="NaturalNumbers", printgen=10, withTips=true, withStartStates=true, filename="./output/"+out_str+".states.txt")

# mcmc
ch = mcmc(mv,mn,mdl)
ch.burnin(10000,200)
ch.run(30000)


# you may want to quit RevBayes now
q()
