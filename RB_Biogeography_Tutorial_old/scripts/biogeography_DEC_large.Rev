# 
fp      = "../"
area_fn = fp + "data/earth25.still.atlas.txt"
data_fn = fp + "data/primates_bg_n25.nex"
tree_fn = fp + "data/primates.tre"
out_fn  = fp + "output/bg_large"
data  <- readDiscreteCharacterData(data_fn)
tree  <- readTrees(tree_fn)[1]
atlas <- readAtlas(area_fn)

n_areas = atlas.nAreas()
n_nodes = tree.nnodes()

moves = VectorMoves()
monitors = VectorMonitors()
ngen = 30000

# save a copy of the tree with node indexes (for later use)
write(tree,filename=tree_fn+".index.tre")

# biogeographical clock
clock_bg ~ dnExp(10.)
clock_bg.setValue(rexp(1,100.)[1])
moves.append( mvScale(clock_bg, lambda=0.5, weight=5.0) )

# area gain-loss rate simplex
glr ~ dnDirichlet([1,1])
glr.setValue(simplex(1,2))
moves.append( mvSimplexElementScale(glr, alpha=50.0, weight=5.0) )

# nicknames for gain-loss rate elements
r_gain := glr[1] * clock_bg
r_loss := glr[2] * clock_bg

# per-area rate matrix
#q_area := fnFreeK( glr )
q_area := fnFreeBinary( [r_gain, r_loss], rescale=false )


# distance power parameter
dp ~ dnExp(1)
moves.append( mvScale(x=dp, lambda=0.5, weight=5.0) )

# geographical distance rate modifier
grm := fnBiogeoGRM(atlas=atlas, distancePower=dp, useAvailable=false, useDistance=true)

# per-range rate matrix
#q_range := fnBiogeoDE(gainLossRates=q_area, branchRates=clock_bg, geoRateMod=grm, numAreas=atlas.nAreas(), forbidExtinction=true)
q_range := fnBiogeoDE(gainLossRates=q_area, geoRateMod=grm, numAreas=atlas.nAreas(), forbidExtinction=true)

# cladogenesis probabilities
#clado_prob ~ dnDirichlet([1,1,1])
#widespread_sympatry := clado_prob[1]
#subset_sympatry     := clado_prob[2]
#allopatry           := clado_prob[3]
#moves.append( mvSimplexElementScale(clado_prob, alpha=50.0, weight=5.0) )
clado_prob <- simplex(1,0,0)


# the model
print("Create dnPhyloDACTMC")
m ~ dnPhyloDACTMC(tree=tree, Q=q_range,  branchRates=clock_bg, cladoProbs=clado_prob, type="Biogeo", forbidExtinction=true, useCladogenesis=true)
print("...done!")
print("Clamp dnPhyloDACTMC")
m.redraw()
#m.clamp(data)
print("...done!")
print("Compute m.lnProbability()")
m.lnProbability()
print("...done!")

# data augmentation proposals
#moves.append( mvCharacterHistory(ctmc=m, qmap=q_range, lambda=0.01, graph="node", proposal="rejection", weight=n_nodes*5.) )
#moves.append( mvCharacterHistory(ctmc=m, qmap=q_range, lambda=0.01, graph="branch", proposal="rejection", weight=n_nodes*1) )
#moves.append( mvCharacterHistory(ctmc=m, qmap=q_range, lambda=0.20, graph="node", proposal="rejection", weight=n_nodes*5) )
#moves.append( mvCharacterHistory(ctmc=m, qmap=q_range, lambda=0.20, graph="branch", proposal="rejection", weight=n_nodes*1) )
moves.append( mvCharacterHistory(ctmc=m, qmap=q_area, lambda=1.00, graph="node", proposal="rejection", weight=n_nodes*5) )
#moves.append( mvCharacterHistory(ctmc=m, qmap=q_area, lambda=1.00, graph="branch", proposal="rejection", weight=n_nodes*1) )

# create the model
my_model = model(m)

# add standard monitors
#monitors.append( mnScreen(printgen=1000, clock_bg, r_gain, r_loss, dp, subset_sympatry, allopatry, widespread_sympatry) )
#monitors.append( mnFile(clock_bg, r_gain, r_loss, dp, subset_sympatry, allopatry, widespread_sympatry, filename=out_fn+".params.txt", printgen=10) )
monitors.append( mnScreen(printgen=1000, clock_bg, r_gain, r_loss, dp) )
monitors.append( mnFile(clock_bg, r_gain, r_loss, dp, filename=out_fn+".params.txt", printgen=10) )


# add special data augmentation monitors
monitors.append( mnCharHistoryNewick(filename=out_fn+".events.txt", ctmc=m, tree=tree, printgen=100, style="events") )
monitors.append( mnCharHistoryNewick(filename=out_fn+".counts.txt", ctmc=m, tree=tree, printgen=100, style="counts") )

# add animation monitor
monitors.append( mnCharHistoryNhx(filename=out_fn+".phw.txt", ctmc=m, tree=tree, atlas=atlas, samplegen=100, maxgen=ngen, burnin=0.5) )

# create mcmc
my_mcmc = mcmc(my_model, monitors, moves)

# run mcmc (without burn-in)
my_mcmc.run(generations=ngen)


# you may want to quit RevBayes now
q()
