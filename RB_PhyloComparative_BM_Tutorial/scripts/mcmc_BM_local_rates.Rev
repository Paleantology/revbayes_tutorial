################################################################################
#
# MCMC analysis of endocranial volume in primates
# 
# Model:
# Brownian motion model
# rate-shift (random local clock) model.
#
#
# author: Sebastian Hoehna
#
################################################################################

########
# Data #
########

# read the data
contData <- readContinuousCharacterData("data/primates_lhtlog.nex")

contData.excludeAll()
contData.includeCharacter(1) 
#contData.excludeCharacter(2:11)


# get some useful variables from the data
taxaCount <- contData.ntaxa()
names <- contData.names()
numNodes <- 2*taxaCount - 1
numBranches <- 2*taxaCount - 2

moves = VectorMoves()





########
# Tree #
########

# work under fixed topology
treeArray <- readTrees("data/primates.tree")
psi <- treeArray[1]





#######
# RLC #
#######

# get a random variable for the probability of a rate change
#rho ~ dnBeta(1,1)
# We need to initialize the probability of a rate change with a very low value because we want to start our MCMC at or close to the strict clock model.
# Starting from a strict clock model makes it easier for the MCMC to add new local clocks.
#rho.setValue(0.001)
#moves.append( mvSlide(rho, delta=0.01, tune=true, weight=2.0) )

rho <- 0.5

initialClockRate <- 1

for (i in numBranches:1) {
   rateChangeProbability[i] := Probability(1-rho)      # + (1-exp(-lambda*psi.branchLength(i)))
   clockRateMultiplier[i] ~ dnReversibleJumpMixture(1, dnGamma(2,2), rateChangeProbability[i] )
   if ( psi.isRoot( psi.parent(i) ) ) {
      clockRate[i] := initialClockRate * clockRateMultiplier[i]
   } else {
      clockRate[i] := clockRate[psi.parent(i)] * clockRateMultiplier[i]
   }
   clockRateChange[i] := ifelse( clockRateMultiplier[i] == 1, 0, 1 )
   moves.append( mvRJSwitch(clockRateMultiplier[i], weight=1) )
   moves.append( mvScale(clockRateMultiplier[i], lambda=0.1, tune=true, weight=1) )
}

numRateChanges := sum( clockRateChange )




########
#  BM  #
########


# sigma: variance per unit of time of the Brownian motion
logSigma ~ dnUniform(-5,5)
sigma := 10^logSigma

# Note that we provide a set of branch rates plus a per site rate multiplier.
# That means that we could analyze multiple continuous traits simultaneously
# where all traits share the same per branch rate shift but each trait can have its own
# overall rate multiplier

moves.append( mvSlide(logSigma, delta=1.0, tune=true, weight=2.0) )


# univariate Brownian process along the tree
# parameterized by sigma
logmass ~ dnPhyloBrownianREML(psi, branchRates=clockRate, siteRates=sigma, nSites=1)

logmass.clamp( contData )




########
# MCMC #
########

mymodel = model(rho)

monitors[1] = mnScreen(printgen=1000, rho, initialClockRate, numRateChanges)
monitors[2] = mnModel(filename="output/auteur.log",printgen=10, separator = TAB)
monitors[3] = mnExtNewick(filename="output/primates_mass_local_rate_jumps.trees", isNodeParameter=FALSE, printgen=10, separator = TAB, tree=psi, clockRate, clockRateChange)

mymcmc = mcmc(mymodel, monitors, moves)
mymcmc.burnin(generations=5000,tuningInterval=250)
mymcmc.run(generations=20000)

treetrace = readTreeTrace("output/primates_mass_local_rate_jumps.trees", treetype="clock")
map_tree = mapTree(treetrace,"output/primates_mass_local_rate_jumps_MAP.tree")

q()

