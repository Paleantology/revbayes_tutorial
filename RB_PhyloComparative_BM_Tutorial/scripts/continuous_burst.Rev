################################################################################
#
# RevBayes Example: Bayesian inference of continuous trait evolution using 
#                   Brownian Motion and an early burst model.
#
#
# authors: Sebastian Hoehna
#
################################################################################

# read the data 
contData <- readContinuousCharacterData("data/primates_lhtlog.nex")

contData.excludeAll()
contData.includeCharacter(1) 
#contData.excludeCharacter(2:11)


# get some useful variables from the data
n_tips <- contData.ntaxa()
n_nodes <- 2*n_tips - 1
n_branches <- 2*n_tips - 2

# work under fixed topology
treeArray <- readTrees("data/primates.tree")
psi <- treeArray[1]

moves = VectorMoves()



# sigma: variance per unit of time of the Brownian motion
logSigma ~ dnUniform(-5,5)
sigma := 10^logSigma

moves.append( mvSlide(logSigma, delta=1.0, tune=true, weight=2.0) )


########################
# Branch-specific rate #
########################

e(-alpha*t)

-alpha*e(-alpha*T) + alpha*e(-alpha*(T-t))
-alpha*e(-alpha*T) + alpha*e(-alpha*T) * alpha*e(alpha*t)
(e(alpha*t) - 1) * alpha*e(-alpha*T)

rho <- 0.01

logRootOptim ~ dnUniform(-10,10)
moves.append( mvSlide(logRootOptim,delta=10,tune=true,weight=2) )

root_age := psi.rootAge()

for (i in n_branches:1) {
   optimChangeProbability[i] := Probability(1-rho)      # + (1-exp(-lambda*psi.branchLength(i)))
   optimMultiplier[i] ~ dnReversibleJumpMixture(1, dnGamma(2,2), optimChangeProbability[i] )
   if ( psi.isRoot( psi.parent(i) ) ) {
      nodeOptim[i] := logRootOptim * optimMultiplier[i]
   } else {
      nodeOptim[i] := nodeOptim[psi.parent(i)] * optimMultiplier[i]
   }
   
   root_age - psi.nodeAge(i)
   optimChange[i] := ifelse( optimMultiplier[i] == 1, 0, 1 )
   moves.append( mvRJSwitch(optimMultiplier[i], weight=1) )
   moves.append( mvScale(optimMultiplier[i], lambda=0.1, tune=true, weight=1) )
}

numOptimChanges := sum( optimChange )

# univariate Brownian process along the tree
# parameterized by sigma
logmass ~ dnPhyloBrownianREML(psi, branchRates=1.0, siteRates=sigma, nSites=1)


logmass.clamp( contData )

# create the model
mymodel = model(sigma)

# on screen, we will monitor only the correlation coefficient and the mean value of each trait
monitors[1] = mnScreen(printgen=10000, sigma)

# a model monitor
monitors[2] = mnFile(filename="output/primates_mass_REML.log", printgen=10, separator = TAB, sigma)
 
mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=10000, tuningInterval=250)
mymcmc.run(300000)

q()
