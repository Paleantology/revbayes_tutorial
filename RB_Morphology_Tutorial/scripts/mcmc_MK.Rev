######################
# read in the data 
######################

time_tree <- readTrees("data/Primates_tree.nex")[1]
data <- readDiscreteCharacterData("data/Primates_morph.nex")

n_char <- data.nchar()


# in this example we are only going to use the first character of the matrix
data.excludeCharacter(5:n_char)
#data.includeCharacter(1)


# Get some useful variables from the data. We need these later on.
n_species = data.ntaxa()
taxa = data.taxa()
n_branches = 2 * n_species - 3


moves = VectorMoves()
monitors = VectorMonitors()

n_sites = 4


#######################
# Morphological clock #
#######################

### We know from empirical estimates a clock rate which is 0.01 (=1%) per million years per site
### Nevertheless, we will estimate it here because we fixed the root age
### we use a uniform prior on the log-transform clock rate
log_clock_rate ~ dnUniform(-8,2)
moves.append( mvSlide(log_clock_rate, weight=2.0) )
clock_rate := 10^log_clock_rate


######################
# Substitution Model #
######################

# Now create a deterministic variable for the nucleotide substitution rate matrix.
Q <- fnJC(2)

# Create a stochastic node for the sequence evolution continuous-time Markov chain (CTMC).
morph_ctmc ~ dnPhyloCTMC(tree=time_tree, Q=Q, branchRates=clock_rate, type="Standard")

# and attach the sequence data
morph_ctmc.clamp(data)


#######################
# Set up the monitors #
#######################

# First, a screen monitor with some useful variables:
monitors.append( mnScreen(printgen=1000, clock_rate) )

# The ancestral state monitor for the chromosome number reconstruction:
monitors.append( mnJointConditionalAncestralState(tree=time_tree, ctmc=morph_ctmc, type="Standard", printgen=10, withTips=true, withStartStates=false, filename="output/anc_states.log") )

# And another monitor for all the model variables:
#monitors.append( mnModel(filename="output/morph_MK_equal.log", printgen=10) )

monitors.append( mnFile(filename="output/test.trees", printgen=10, time_tree) )


####################
# Set up the model #
####################

mymodel = model(time_tree)


###########################
# Run the MCMC simulation #
###########################


# Now set up the MCMC.
mymcmc = mcmc(mymodel, monitors, moves)

### pre-burnin to tune the proposals
mymcmc.burnin(generations=5000,tuningInterval=200)

### run the MCMC
mymcmc.run(generations=10000)


##############################
# Summarize ancestral states #
##############################

anc_states = readAncestralStateTrace("output/anc_states.log")
anc_trees  = readAncestralStateTreeTrace("output/test.trees", treetype="clock")
anc_tree   = ancestralStateTree(time_tree, anc_states, anc_trees, include_start_states=false, "output/ancestral_states_results.tree", 0)

#ancestralStateTree(tree, anc_states, anc_trees, include_start_states=false, "output/ancestral_states_results_site1.tree", 0, "mean")
#ancestralStateTree(tree, anc_states, anc_trees, include_start_states=false, "output/ancestral_states_results_site2.tree", 0, "mean", site=2)
#ancestralStateTree(tree, anc_states, anc_trees, include_start_states=false, "output/ancestral_states_results_site3.tree", 0, "mean", site=3)


q()
