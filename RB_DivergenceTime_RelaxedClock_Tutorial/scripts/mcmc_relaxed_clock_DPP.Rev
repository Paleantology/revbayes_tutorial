################################################################################
#
# RevBayes Example: Bayesian inference of phylogeny using a general time reversible (GTR)
#                   substitution model with gamma distributed rate variation among sites
#                   and a DPP-lognormal relaxed local clock. 
#                   The tree prior is a constant-rate birth-death process
#                   with several node calibrations.
# 
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

data <- readDiscreteCharacterData("data/primates_cytb.nex")

# Get some useful variables from the data. We need these later on.
n_species <- data.ntaxa()
n_branches <- 2*n_species - 2
taxa <- data.taxa()

# vector to add MCMC moves
moves = VectorMoves()
monitors = VectorMonitors()



######################
# Substitution Model #
######################

#### specify the GTR+G substitution model applied uniformly to all sites ###
er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)
moves.append( mvSimplexElementScale(er,weight=3) )


pi_prior <- v(1,1,1,1) 
pi ~ dnDirichlet(pi_prior)
moves.append( mvSimplexElementScale(pi,weight=2) )


#### create a deterministic variable for the rate matrix ####
Q := fnGTR(er,pi) 


#############################
# Among Site Rate Variation #
#############################

alpha_prior_mean <- ln(2.0)
alpha_prior_sd <- 0.587405
alpha ~ dnLognormal( alpha_prior_mean, alpha_prior_sd )
gamma_rates := fnDiscretizeGamma( alpha, alpha, 4, false )

# add moves for the stationary frequencies, exchangeability rates and the shape parameter
moves.append( mvScale(alpha,weight=2) )




##############
# Tree model #
##############

### the birth rate is a stochastic random variable drawn from a lognormal prior
### MCMC samples this variable using a scale proposal
diversification_mean <- ln( ln(n_species/2.0) / 90 )
diversification_sd <- 0.587405*2
diversification ~ dnLognormal(mean=diversification_mean,sd=diversification_sd) 
moves.append( mvScale(diversification,lambda=1.0,tune=true,weight=3.0) )

turnover_mean <- ln( ln(n_species/2.0) / 90 )
turnover_sd <- 0.587405*2
turnover ~ dnLognormal(mean=turnover_mean,sd=turnover_sd) 
moves.append( mvScale(turnover,lambda=1.0,tune=true,weight=3.0) )

### Transform the parameters
birth_rate := diversification + turnover
death_rate := turnover

### rho is the probability of sampling species at the present
### fix this to 367/450, since there are ~450 described species of primates
### and we have sampled 367
rho <- n_species/450

### the BDP is conditioned on the root time
### here we use an informative prior on the root age
### this prior is a normal distribution with mean 90 and standard deviation of 6
root_time ~ dnUniform(57,200)
moves.append( mvScale(root_time, weight=2.0) )

### the time tree is a stochastic node modeled by the constant rate birth-death process (dnBDP)
psi ~ dnBDP(lambda=birth_rate, mu=death_rate, rho=rho, rootAge=root_time, samplingStrategy="uniform", condition="survival", taxa=taxa)


### add some moves that change the tree
moves.append( mvNarrow(psi, weight=5.0) )
moves.append( mvNNI(psi, weight=1.0) )
moves.append( mvFNPR(psi, weight=3.0) )
#moves.append( mvGPR(psi, weight=1.0) )
moves.append( mvSubtreeScale(psi, weight=3.0) )
moves.append( mvNodeTimeSlideUniform(psi, weight=15.0) )


### now we additionally add a deterministic variable for the age of
### catarrhini
clade_catarrhini = clade("Pan_paniscus", "Macaca_mulatta")
age_catarrhini := tmrca(psi, clade_catarrhini)
min_age_catarrhini <- 20.55
max_age_catarrhini <- 37.3
width_age_prior_catarrhini <- (max_age_catarrhini-min_age_catarrhini)/2.0
mean_age_prior_catarrhini <- min_age_catarrhini + width_age_prior_catarrhini
obs_age_catarrhini ~ dnSoftBoundUniformNormal(min=age_catarrhini - width_age_prior_catarrhini, max=age_catarrhini + width_age_prior_catarrhini, sd=2.5, p=0.95)
obs_age_catarrhini.clamp( mean_age_prior_catarrhini )

### platyrrhini
clade_platyrrhini = clade("Alouatta_palliata", "Callicebus_donacophilus")
age_platyrrhini := tmrca(psi, clade_platyrrhini)
min_age_platyrrhini <- 11.8
max_age_platyrrhini <- 37.3
width_age_prior_platyrrhini <- (max_age_platyrrhini-min_age_platyrrhini)/2.0
mean_age_prior_platyrrhini <- min_age_platyrrhini + width_age_prior_platyrrhini
obs_age_platyrrhini ~ dnSoftBoundUniformNormal(min=age_platyrrhini - width_age_prior_platyrrhini, max=age_platyrrhini + width_age_prior_platyrrhini, sd=2.5, p=0.95)
obs_age_platyrrhini.clamp( mean_age_prior_platyrrhini )

### simiiformes
clade_simiiformes = clade("Cebus_albifrons", "Macaca_mulatta")
age_simiiformes := tmrca(psi, clade_simiiformes)
min_age_simiiformes <- 28.3
max_age_simiiformes <- 56
width_age_prior_simiiformes <- (max_age_simiiformes-min_age_simiiformes)/2.0
mean_age_prior_simiiformes <- min_age_simiiformes + width_age_prior_simiiformes
obs_age_simiiformes ~ dnSoftBoundUniformNormal(min=age_simiiformes - width_age_prior_simiiformes, max=age_simiiformes + width_age_prior_simiiformes, sd=2.5, p=0.95)
obs_age_simiiformes.clamp( mean_age_prior_simiiformes )

### lorisiformes
clade_lorisiformes = clade("Loris_tardigradus", "Galago_senegalensis")
age_lorisiformes := tmrca(psi, clade_lorisiformes)
min_age_lorisiformes <- 37.1
max_age_lorisiformes <- 56
width_age_prior_lorisiformes <- (max_age_lorisiformes-min_age_lorisiformes)/2.0
mean_age_prior_lorisiformes <- min_age_lorisiformes + width_age_prior_lorisiformes
obs_age_lorisiformes ~ dnSoftBoundUniformNormal(min=age_lorisiformes - width_age_prior_lorisiformes, max=age_lorisiformes + width_age_prior_lorisiformes, sd=2.5, p=0.95)
obs_age_lorisiformes.clamp( mean_age_prior_lorisiformes )


########
# UCLN #
########


ucln_mean ~ dnUnif(1E-6, 10)
ucln_log_mean := ln( ucln_mean )
ucln_sigma <- 0.587405
branch_rates ~ dnDPP( dnLnorm(ucln_log_mean, ucln_sigma), concentration=2.0, n_branches )
moves.append( mvDPPValueScaling( branch_rates, weight=5.0 ) )
moves.append( mvDPPAllocateAuxGibbs(branch_rates, numAux=4, weight=2.0) )

mean_rt := mean(branch_rates)


###################
# PhyloCTMC Model #
###################

# the sequence evolution model
seq ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=branch_rates, siteRates=gamma_rates, type="DNA")

# attach the data
seq.clamp(data)




#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(Q)






monitors.append( mnModel(filename="output/primates_cytb_DPP.log",printgen=10, separator = TAB) )
monitors.append( mnExtNewick(filename="output/primates_cytb_DPP.trees", isNodeParameter=FALSE, printgen=10, separator = TAB, tree=psi, branch_rates) )
monitors.append( mnScreen(printgen=100, mean_rt, root_time, age_simiiformes) )

mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=1000,tuningInterval=200)
mymcmc.run(generations=3000)


# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace = readTreeTrace("output/primates_cytb_DPP.trees", treetype="clock")

map_tree = mapTree(treetrace,"output/primates_cytb_DPP.tree")

# you may want to quit RevBayes now
q()

