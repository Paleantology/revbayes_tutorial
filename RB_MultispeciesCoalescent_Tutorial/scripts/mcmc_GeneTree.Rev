################################################################################
#
# RevBayes Example: Species tree inference using the multispecies coalescent.
#
#
# This file: reconstructs an ultrametric gene tree for gene tree "i".
# If you want to use it to reconstruct a gene tree, you need to add a line setting the value of i.
# For instance, to reconstruct a gene tree for gene "GHRmeredith", you need to set i=3 before line 28.
# This script is launched by the bash script "construct_all_GeneTrees.sh" to construct all 10 gene trees.
#
# authors: Bastien Boussau and Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for all genes

locus_names = ["COIII", "FGA", "GHRmeredith", "lrpprc_169", "npas3", "sim1", "tex2", "ttr", "zfy", "zic3"]

num_loci = locus_names.size()

# read in each data matrix separately
data <- readDiscreteCharacterData("data/" + locus_names[i] + ".fasta")
taxa <- data.taxa()


# vector to add MCMC moves
moves = VectorMoves()



######################
# tree model #
######################

# Specify a prior on the diversification and turnover rate
speciation ~ dnGamma(2,2)
relativeExtinction ~ dnBeta(1,1)

# now transform the diversification and turnover rates into speciation and extinction rates
extinction := speciation * relativeExtinction

# specify a prior on the root age (our informed guess is about 75-80 mya)
root ~ dnNormal(mean=75,sd=2.5,min=0.0, max=Inf)

sampling_fraction <- 23 / 450 # 23 out of the ~ 450 primate species

# create some moves that change the stochastic variables
# all moves are sliding and scaling proposals
moves.append( mvSlideBactrian(speciation,tune=true,weight=2) )
moves.append( mvSlideBactrian(relativeExtinction,tune=true,weight=2) )
moves.append( mvScaleBactrian(speciation,lambda=1,tune=true,weight=2) )
moves.append( mvScaleBactrian(relativeExtinction,lambda=1,tune=true,weight=2) )

# construct a variable for the tree drawn from a birth death process
psi ~ dnBDP(lambda=speciation, mu=extinction, rootAge=root, rho=sampling_fraction, taxa=taxa )

moves.append( mvNarrow(psi, weight=5.0) )
moves.append( mvNNI(psi, weight=1.0) )
moves.append( mvFNPR(psi, weight=3.0) )
moves.append( mvGPR(psi, weight=3.0) )
moves.append( mvSubtreeScale(psi, weight=3.0) )
moves.append( mvNodeTimeSlideUniform(psi, weight=5.0) )


###############
# Clock Model #
###############


clock_rate ~ dnExponential(1.0)

moves.append( mvScaleBactrian(clock_rate, weight=5.0) )



######################
# Substitution Model #
######################

#### specify the HKY substitution model applied uniformly to all sites ###
kappa ~ dnLognormal(0,1)
moves.append( mvScaleBactrian(kappa,weight=1) )


pi_prior <- v(1,1,1,1)
pi ~ dnDirichlet(pi_prior)
moves.append( mvSimplexElementScale(pi,weight=2) )


#### create a deterministic variable for the rate matrix ####
Q := fnHKY(kappa,pi)





#############################
# Among Site Rate Variation #
#############################

# We avoid this to save some computing time.

#for ( i in 1:num_loci ) {
#
#    alpha_prior <- 0.05
#    alpha ~ dnExponential( alpha_prior )
#    gamma_rates := fnDiscretizeGamma( alpha, alpha, 4, false )
#
#    # add moves for the shape parameter
#    moves.append( mvScale(alpha,weight=2) )
#
#}

###################
# PhyloCTMC Model #
###################



    # the sequence evolution model
#    seq ~ dnPhyloCTMC(tree=geneTree, Q=Q, branchRates=clock_rate, siteRates=gamma_rates, type="DNA")
    seq ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=clock_rate, type="DNA")

    # attach the data
    seq.clamp(data)





#############
# THE Model #
#############

# We get a handle on our model.
# We can use any node of our model as a handle, here we choose to use the topology.
mymodel = model(psi)

output_folder = "output_GeneTrees/"

# Monitors to check the progression of the program
monitors[1] = mnScreen(printgen=100, psi)
monitors[2] = mnModel(filename=output_folder+locus_names[i] + ".log",printgen=10, separator = TAB)
monitors[3] = mnFile(filename=output_folder+locus_names[i] + ".trees",printgen=10, separator = TAB, psi)

# Here we use a plain MCMC. You could also set nruns=2 for a replicated analysis
# or use mcmcmc with heated chains.
mymcmc = mcmc(mymodel, monitors, moves, nruns=1)

# This should be sufficient to obtain enough MCMC samples
mymcmc.burnin(generations=3000,tuningInterval=100)#, underPrior=true)
mymcmc.run(generations=20000)#, underPrior=true)


mymcmc.operatorSummary()


# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace = readTreeTrace(output_folder+locus_names[i] + ".trees", treetype="clock")
# and get the summary of the tree trace
treetrace.summarize()

mapTree(treetrace,output_folder+locus_names[i] + "_MAP.tree")

# you may want to quit RevBayes now
q()
